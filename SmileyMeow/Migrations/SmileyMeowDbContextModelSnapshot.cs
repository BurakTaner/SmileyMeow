// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmileyMeow.Data;

#nullable disable

namespace SmileyMeow.Migrations
{
    [DbContext(typeof(SmileyMeowDbContext))]
    partial class SmileyMeowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.Appointment", b =>
                {
                    b.Property<int>("PetnPersonId")
                        .HasColumnType("integer")
                        .HasColumnName("petnpersonid");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointmentdate");

                    b.Property<int>("AppointmentStatussId")
                        .HasColumnType("integer")
                        .HasColumnName("appointmentstatussid");

                    b.Property<int>("DoctorPreferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorpreferenceid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timecreated");

                    b.HasKey("PetnPersonId", "DoctorId")
                        .HasName("pk_appointments");

                    b.HasIndex("AppointmentStatussId")
                        .HasDatabaseName("ix_appointments_appointmentstatussid");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_appointments_doctorid");

                    b.HasIndex("DoctorPreferenceId")
                        .HasDatabaseName("ix_appointments_doctorpreferenceid");

                    b.ToTable("appointments", (string)null);

                    b.HasData(
                        new
                        {
                            PetnPersonId = 6,
                            DoctorId = 6,
                            AppointmentDate = new DateTime(2023, 1, 27, 14, 54, 12, 240, DateTimeKind.Local).AddTicks(8107),
                            AppointmentStatussId = 6,
                            DoctorPreferenceId = 6,
                            TimeCreated = new DateTime(2022, 12, 28, 14, 54, 12, 240, DateTimeKind.Local).AddTicks(8103)
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.AppointmentStatuss.AppointmentStatus", b =>
                {
                    b.Property<int>("AppointmentStatussId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("appointmentstatussid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentStatussId"));

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("AppointmentStatussId")
                        .HasName("pk_appointmentstatus");

                    b.ToTable("appointmentstatus", (string)null);

                    b.HasData(
                        new
                        {
                            AppointmentStatussId = 6,
                            Status = "Active Appointment"
                        },
                        new
                        {
                            AppointmentStatussId = 7,
                            Status = "Expired Appointment"
                        },
                        new
                        {
                            AppointmentStatussId = 8,
                            Status = "Canceled Appointment"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.PatientInformationn.PatientInformation", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("integer")
                        .HasColumnName("patientinformationid");

                    b.Property<int>("EatingStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("eatingstatusid");

                    b.Property<int>("EnergyStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("energystatusid");

                    b.Property<string>("IlnesssesInThePast")
                        .HasColumnType("text")
                        .HasColumnName("ilnesssesinthepast");

                    b.Property<string>("InformationAboutPatient")
                        .HasColumnType("text")
                        .HasColumnName("informationaboutpatient");

                    b.Property<int>("PeeingStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("peeingstatusid");

                    b.HasKey("PatientInformationId")
                        .HasName("pk_patientinformations");

                    b.HasIndex("EatingStatusId")
                        .HasDatabaseName("ix_patientinformations_eatingstatusid");

                    b.HasIndex("EnergyStatusId")
                        .HasDatabaseName("ix_patientinformations_energystatusid");

                    b.HasIndex("PeeingStatusId")
                        .HasDatabaseName("ix_patientinformations_peeingstatusid");

                    b.ToTable("patientinformations", (string)null);

                    b.HasData(
                        new
                        {
                            PatientInformationId = 6,
                            EatingStatusId = 2,
                            EnergyStatusId = 1,
                            IlnesssesInThePast = "Sif is a 3-year-old wolf who had a case of mange a year ago, which was treated with medicated baths and topical ointments. She also developed an ear infection a few months ago, which was treated with antibiotics and ear drops. In the past, Sif has also had some minor digestive issues that we've been able to resolve with diet and supplement changes.",
                            InformationAboutPatient = "My wolf Sif has been eating fine and her energy levels are good, but she has been having trouble with her peeing. She's been going more frequently and sometimes it seems like it's painful for her. I'm really concerned because she's usually such a healthy wolf.",
                            PeeingStatusId = 3
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.StatusLevell.StatusLevel", b =>
                {
                    b.Property<int>("StatusLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("statuslevelid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusLevelId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("StatusLevelId")
                        .HasName("pk_statuslevels");

                    b.ToTable("statuslevels", (string)null);

                    b.HasData(
                        new
                        {
                            StatusLevelId = 1,
                            Name = "Good"
                        },
                        new
                        {
                            StatusLevelId = 2,
                            Name = "Middle"
                        },
                        new
                        {
                            StatusLevelId = 3,
                            Name = "Bad"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("balanceid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BalanceId"));

                    b.Property<decimal>("PersonBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("personbalance");

                    b.HasKey("BalanceId")
                        .HasName("pk_balances");

                    b.ToTable("balances", (string)null);

                    b.HasData(
                        new
                        {
                            BalanceId = 6,
                            PersonBalance = 150.55m
                        },
                        new
                        {
                            BalanceId = 666,
                            PersonBalance = 90.65m
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("doctorid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorId"));

                    b.Property<int>("BalanceId")
                        .HasColumnType("integer")
                        .HasColumnName("balanceid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<int>("DoctorTitleId")
                        .HasColumnType("integer")
                        .HasColumnName("doctortitleid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<int>("HumanGenderId")
                        .HasColumnType("integer")
                        .HasColumnName("humangenderid");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<int>("PronounId")
                        .HasColumnType("integer")
                        .HasColumnName("pronounid");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("schoolid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("DoctorId")
                        .HasName("pk_doctors");

                    b.HasIndex("BalanceId")
                        .HasDatabaseName("ix_doctors_balanceid");

                    b.HasIndex("DoctorTitleId")
                        .HasDatabaseName("ix_doctors_doctortitleid");

                    b.HasIndex("HumanGenderId")
                        .HasDatabaseName("ix_doctors_humangenderid");

                    b.HasIndex("PronounId")
                        .HasDatabaseName("ix_doctors_pronounid");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_doctors_schoolid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_doctors_userid");

                    b.ToTable("doctors", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 6,
                            BalanceId = 666,
                            DOB = new DateTime(1978, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorTitleId = 6,
                            FirstName = "Patches",
                            HumanGenderId = 66,
                            LastName = "Whisper",
                            PhoneNumber = "05434561275",
                            PronounId = 6,
                            UserId = 666
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.DoctorInfoo.DoctorInfo", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorid");

                    b.Property<string>("DoctorInformation")
                        .HasColumnType("text")
                        .HasColumnName("doctorinformation");

                    b.HasKey("DoctorId")
                        .HasName("pk_doctorinfos");

                    b.ToTable("doctorinfos", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 6,
                            DoctorInformation = "Hi, I am Dr. Patches, a veterinarian with over 10 years of experience in the field. I received my Doctor of Veterinary Medicine degree from the University of California, Davis and have since worked at a variety of clinics, caring for all types of animals and their petparents. My specialty is in small animal medicine, but I am well-versed in treating all kinds of creatures, from cats and dogs to birds and reptiles. I am passionate about helping animals and their owners, and take pride in being able to diagnose and treat a wide range of conditions. In my free time, I enjoy volunteering at local animal shelters and spending time with my own pets, which include a rescue dog and two cats. I believe that effective communication with petparents is crucial in providing the best care for their beloved animals."
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.HumanGenderr.HumanGender", b =>
                {
                    b.Property<int>("HumanGenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("humangenderid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HumanGenderId"));

                    b.Property<string>("GName")
                        .HasColumnType("text")
                        .HasColumnName("gname");

                    b.HasKey("HumanGenderId")
                        .HasName("pk_humangender");

                    b.ToTable("humangender", (string)null);

                    b.HasData(
                        new
                        {
                            HumanGenderId = 6,
                            GName = "Non-Binary"
                        },
                        new
                        {
                            HumanGenderId = 66,
                            GName = "Genderfluid"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.PetParent", b =>
                {
                    b.Property<int>("PetParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("petparentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PetParentId"));

                    b.Property<int>("BalanceId")
                        .HasColumnType("integer")
                        .HasColumnName("balanceid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<int>("HumanGenderId")
                        .HasColumnType("integer")
                        .HasColumnName("humangenderid");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<int>("PronounId")
                        .HasColumnType("integer")
                        .HasColumnName("pronounid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("PetParentId")
                        .HasName("pk_petparents");

                    b.HasIndex("BalanceId")
                        .HasDatabaseName("ix_petparents_balanceid");

                    b.HasIndex("HumanGenderId")
                        .HasDatabaseName("ix_petparents_humangenderid");

                    b.HasIndex("PronounId")
                        .HasDatabaseName("ix_petparents_pronounid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_petparents_userid");

                    b.ToTable("petparents", (string)null);

                    b.HasData(
                        new
                        {
                            PetParentId = 6,
                            BalanceId = 6,
                            DOB = new DateTime(1999, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Artorias",
                            HumanGenderId = 6,
                            LastName = "Astora",
                            MiddleName = "Solaire",
                            PronounId = 6,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Prounounn.Pronoun", b =>
                {
                    b.Property<int>("ProunounId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prounounid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProunounId"));

                    b.Property<string>("PName")
                        .HasColumnType("text")
                        .HasColumnName("pname");

                    b.HasKey("ProunounId")
                        .HasName("pk_pronouns");

                    b.ToTable("pronouns", (string)null);

                    b.HasData(
                        new
                        {
                            ProunounId = 6,
                            PName = "They/Them"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Titles.DoctorTitle", b =>
                {
                    b.Property<int>("DoctorTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("doctortitleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorTitleId"));

                    b.Property<string>("TFullForm")
                        .HasColumnType("text")
                        .HasColumnName("tfullform");

                    b.Property<string>("TShortForm")
                        .HasColumnType("text")
                        .HasColumnName("tshortform");

                    b.HasKey("DoctorTitleId")
                        .HasName("pk_doctortitles");

                    b.ToTable("doctortitles", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorTitleId = 6,
                            TFullForm = "Vetenerian",
                            TShortForm = "DVM"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.PetnPersonn.PetnPerson", b =>
                {
                    b.Property<int>("PetnPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("petnpersonid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PetnPersonId"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer")
                        .HasColumnName("animalid");

                    b.Property<int>("PetParentId")
                        .HasColumnType("integer")
                        .HasColumnName("petparentid");

                    b.HasKey("PetnPersonId")
                        .HasName("pk_petsnpersons");

                    b.HasIndex("AnimalId")
                        .HasDatabaseName("ix_petsnpersons_animalid");

                    b.HasIndex("PetParentId")
                        .HasDatabaseName("ix_petsnpersons_petparentid");

                    b.ToTable("petsnpersons", (string)null);

                    b.HasData(
                        new
                        {
                            PetnPersonId = 6,
                            AnimalId = 6,
                            PetParentId = 6
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Adopt.AdoptInfo", b =>
                {
                    b.Property<int>("AdoptInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("adoptinfoid");

                    b.Property<string>("AdoptText")
                        .HasColumnType("text")
                        .HasColumnName("adopttext");

                    b.HasKey("AdoptInfoId")
                        .HasName("pk_adoptinfos");

                    b.ToTable("adoptinfos", (string)null);

                    b.HasData(
                        new
                        {
                            AdoptInfoId = 6,
                            AdoptText = "So cute"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Breedd.Breed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("breedid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BreedId"));

                    b.Property<string>("BName")
                        .HasColumnType("text")
                        .HasColumnName("bname");

                    b.HasKey("BreedId")
                        .HasName("pk_breeds");

                    b.ToTable("breeds", (string)null);

                    b.HasData(
                        new
                        {
                            BreedId = 6,
                            BName = "Ragdoll"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Pet", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("animalid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnimalId"));

                    b.Property<int>("AdoptInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("adoptinfoid");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer")
                        .HasColumnName("breedid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<bool>("IsAdoptable")
                        .HasColumnType("boolean")
                        .HasColumnName("isadoptable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("integer")
                        .HasColumnName("patientinformationid");

                    b.Property<int?>("PatientİnformationPatientInformationId")
                        .HasColumnType("integer")
                        .HasColumnName("patientİnformationpatientinformationid");

                    b.Property<int>("PetGenderId")
                        .HasColumnType("integer")
                        .HasColumnName("petgenderid");

                    b.Property<int>("SpecieId")
                        .HasColumnType("integer")
                        .HasColumnName("specieid");

                    b.HasKey("AnimalId")
                        .HasName("pk_pets");

                    b.HasIndex("BreedId")
                        .HasDatabaseName("ix_pets_breedid");

                    b.HasIndex("PatientİnformationPatientInformationId")
                        .HasDatabaseName("ix_pets_patientİnformationpatientinformationid");

                    b.HasIndex("PetGenderId")
                        .HasDatabaseName("ix_pets_petgenderid");

                    b.HasIndex("SpecieId")
                        .HasDatabaseName("ix_pets_specieid");

                    b.ToTable("pets", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = 6,
                            AdoptInfoId = 6,
                            BreedId = 6,
                            DOB = new DateTime(2022, 12, 28, 14, 54, 12, 240, DateTimeKind.Local).AddTicks(7429),
                            IsAdoptable = true,
                            Name = "Sif",
                            PatientInformationId = 6,
                            PetGenderId = 6,
                            SpecieId = 6
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.PetGenderr.PetGender", b =>
                {
                    b.Property<int>("PetGenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("petgenderid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PetGenderId"));

                    b.Property<string>("GName")
                        .HasColumnType("text")
                        .HasColumnName("gname");

                    b.HasKey("PetGenderId")
                        .HasName("pk_petgenders");

                    b.ToTable("petgenders", (string)null);

                    b.HasData(
                        new
                        {
                            PetGenderId = 6,
                            GName = "Female"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Speciee.Specie", b =>
                {
                    b.Property<int>("SpecieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("specieid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecieId"));

                    b.Property<string>("SName")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.HasKey("SpecieId")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);

                    b.HasData(
                        new
                        {
                            SpecieId = 6,
                            SName = "Wolf"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.SchoolTypee.SchoolType", b =>
                {
                    b.Property<int>("SchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("schooltypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("SchoolTypeId")
                        .HasName("pk_schooltype");

                    b.ToTable("schooltype", (string)null);

                    b.HasData(
                        new
                        {
                            SchoolTypeId = 6,
                            Name = "University"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Schooll.DoctorSchool", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorid");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("schoolid");

                    b.HasKey("DoctorId", "SchoolId")
                        .HasName("pk_doctorschools");

                    b.ToTable("doctorschools", (string)null);

                    b.HasData(
                        new
                        {
                            DoctorId = 6,
                            SchoolId = 6
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Schooll.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("schoolid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("schooltypeid");

                    b.HasKey("SchoolId")
                        .HasName("pk_school");

                    b.HasIndex("SchoolTypeId")
                        .HasDatabaseName("ix_school_schooltypeid");

                    b.ToTable("school", (string)null);

                    b.HasData(
                        new
                        {
                            SchoolId = 6,
                            Name = "University of California, Davis",
                            SchoolTypeId = 6
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.User.Rolee", b =>
                {
                    b.Property<int>("RoleeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("roleeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("RoleeId")
                        .HasName("pk_rolees");

                    b.ToTable("rolees", (string)null);

                    b.HasData(
                        new
                        {
                            RoleeId = 6,
                            Name = "PetParent"
                        },
                        new
                        {
                            RoleeId = 666,
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.User.Userr", b =>
                {
                    b.Property<int>("UserrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userrid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserrId"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("RoleeId")
                        .HasColumnType("integer")
                        .HasColumnName("roleeid");

                    b.HasKey("UserrId")
                        .HasName("pk_userrs");

                    b.HasIndex("RoleeId")
                        .HasDatabaseName("ix_userrs_roleeid");

                    b.ToTable("userrs", (string)null);

                    b.HasData(
                        new
                        {
                            UserrId = 6,
                            Email = "artorias@gmail.com",
                            Password = "sif123456",
                            RoleeId = 6
                        },
                        new
                        {
                            UserrId = 666,
                            Email = "patches@gmail.com",
                            Password = "patches123456",
                            RoleeId = 666
                        });
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.Appointment", b =>
                {
                    b.HasOne("VetClinicLibrary.Appointmentt.AppointmentStatuss.AppointmentStatus", "AppointmentStatus")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStatussId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_appointmentstatus_appointmentstatustempid");

                    b.HasOne("VetClinicLibrary.Person.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_doctors_doctorid");

                    b.HasOne("VetClinicLibrary.Person.Doctor", "DoctorPreference")
                        .WithMany()
                        .HasForeignKey("DoctorPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_doctors_doctorpreferenceid");

                    b.HasOne("VetClinicLibrary.PetnPersonn.PetnPerson", "PetnPerson")
                        .WithMany()
                        .HasForeignKey("PetnPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_petsnpersons_petnpersonid");

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorPreference");

                    b.Navigation("PetnPerson");
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.PatientInformationn.PatientInformation", b =>
                {
                    b.HasOne("VetClinicLibrary.Appointmentt.StatusLevell.StatusLevel", "EatingStatus")
                        .WithMany()
                        .HasForeignKey("EatingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patientinformations_statuslevels_eatingstatusid");

                    b.HasOne("VetClinicLibrary.Appointmentt.StatusLevell.StatusLevel", "EnergyStatus")
                        .WithMany()
                        .HasForeignKey("EnergyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patientinformations_statuslevels_energystatusid");

                    b.HasOne("VetClinicLibrary.Pett.Pet", "Pet")
                        .WithOne("PatientInformation")
                        .HasForeignKey("VetClinicLibrary.Appointmentt.PatientInformationn.PatientInformation", "PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patientinformations_pets_patientinformationid");

                    b.HasOne("VetClinicLibrary.Appointmentt.StatusLevell.StatusLevel", "PeeingStatus")
                        .WithMany()
                        .HasForeignKey("PeeingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patientinformations_statuslevels_peeingstatusid");

                    b.Navigation("EatingStatus");

                    b.Navigation("EnergyStatus");

                    b.Navigation("PeeingStatus");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Doctor", b =>
                {
                    b.HasOne("VetClinicLibrary.Person.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_balances_balanceid");

                    b.HasOne("VetClinicLibrary.Person.Titles.DoctorTitle", "DoctorTitle")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_doctortitles_doctortitleid");

                    b.HasOne("VetClinicLibrary.Person.HumanGenderr.HumanGender", "HumanGender")
                        .WithMany()
                        .HasForeignKey("HumanGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_humangender_humangenderid");

                    b.HasOne("VetClinicLibrary.Person.Prounounn.Pronoun", "Pronoun")
                        .WithMany("Doctors")
                        .HasForeignKey("PronounId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_pronouns_pronounid");

                    b.HasOne("VetClinicLibrary.Schooll.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_doctors_school_schoolid");

                    b.HasOne("VetClinicLibrary.User.Userr", "Userr")
                        .WithMany("Doctor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_userrs_userrid");

                    b.Navigation("Balance");

                    b.Navigation("DoctorTitle");

                    b.Navigation("HumanGender");

                    b.Navigation("Pronoun");

                    b.Navigation("School");

                    b.Navigation("Userr");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.DoctorInfoo.DoctorInfo", b =>
                {
                    b.HasOne("VetClinicLibrary.Person.Doctor", "Doctor")
                        .WithOne("DoctorInfo")
                        .HasForeignKey("VetClinicLibrary.Person.DoctorInfoo.DoctorInfo", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctorinfos_doctors_doctorid");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.PetParent", b =>
                {
                    b.HasOne("VetClinicLibrary.Person.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petparents_balances_balanceid");

                    b.HasOne("VetClinicLibrary.Person.HumanGenderr.HumanGender", "HumanGender")
                        .WithMany()
                        .HasForeignKey("HumanGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petparents_humangender_humangenderid");

                    b.HasOne("VetClinicLibrary.Person.Prounounn.Pronoun", "Pronoun")
                        .WithMany("PetParents")
                        .HasForeignKey("PronounId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petparents_pronouns_pronounid");

                    b.HasOne("VetClinicLibrary.User.Userr", "Userr")
                        .WithMany("PetParent")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petparents_userrs_userrid");

                    b.Navigation("Balance");

                    b.Navigation("HumanGender");

                    b.Navigation("Pronoun");

                    b.Navigation("Userr");
                });

            modelBuilder.Entity("VetClinicLibrary.PetnPersonn.PetnPerson", b =>
                {
                    b.HasOne("VetClinicLibrary.Pett.Pet", "Pet")
                        .WithMany("PetnPersonn")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petsnpersons_pets_pettempid1");

                    b.HasOne("VetClinicLibrary.Person.PetParent", "PetParent")
                        .WithMany("PetnPersonn")
                        .HasForeignKey("PetParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petsnpersons_petparents_petparentid");

                    b.Navigation("Pet");

                    b.Navigation("PetParent");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Adopt.AdoptInfo", b =>
                {
                    b.HasOne("VetClinicLibrary.Pett.Pet", "Pet")
                        .WithOne("AdoptionInfo")
                        .HasForeignKey("VetClinicLibrary.Pett.Adopt.AdoptInfo", "AdoptInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adoptinfos_pets_adoptinfoid");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Pet", b =>
                {
                    b.HasOne("VetClinicLibrary.Pett.Breedd.Breed", "Breed")
                        .WithMany("Pet")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pets_breeds_breedid");

                    b.HasOne("VetClinicLibrary.Appointmentt.PatientInformationn.PatientInformation", "Patientİnformation")
                        .WithMany()
                        .HasForeignKey("PatientİnformationPatientInformationId")
                        .HasConstraintName("fk_pets_patientinformations_patientİnformationpatientinformati~");

                    b.HasOne("VetClinicLibrary.Pett.PetGenderr.PetGender", "PetGender")
                        .WithMany("Pet")
                        .HasForeignKey("PetGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pets_petgenders_petgenderid");

                    b.HasOne("VetClinicLibrary.Pett.Speciee.Specie", "Specie")
                        .WithMany("Pet")
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pets_species_specieid");

                    b.Navigation("Breed");

                    b.Navigation("Patientİnformation");

                    b.Navigation("PetGender");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("VetClinicLibrary.Schooll.School", b =>
                {
                    b.HasOne("VetClinicLibrary.SchoolTypee.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_school_schooltype_schooltypeid");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("VetClinicLibrary.User.Userr", b =>
                {
                    b.HasOne("VetClinicLibrary.User.Rolee", "Rolee")
                        .WithMany()
                        .HasForeignKey("RoleeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrs_rolees_roleeid");

                    b.Navigation("Rolee");
                });

            modelBuilder.Entity("VetClinicLibrary.Appointmentt.AppointmentStatuss.AppointmentStatus", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Doctor", b =>
                {
                    b.Navigation("DoctorInfo");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.PetParent", b =>
                {
                    b.Navigation("PetnPersonn");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Prounounn.Pronoun", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("PetParents");
                });

            modelBuilder.Entity("VetClinicLibrary.Person.Titles.DoctorTitle", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Breedd.Breed", b =>
                {
                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Pet", b =>
                {
                    b.Navigation("AdoptionInfo");

                    b.Navigation("PatientInformation");

                    b.Navigation("PetnPersonn");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.PetGenderr.PetGender", b =>
                {
                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinicLibrary.Pett.Speciee.Specie", b =>
                {
                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinicLibrary.User.Userr", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("PetParent");
                });
#pragma warning restore 612, 618
        }
    }
}
